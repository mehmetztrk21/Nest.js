Docker
------------------------
ğŸ”¹ 1. Ä°maj (Image) Ä°ÅŸlemleri

docker pull <image>       # Docker Hubâ€™dan imaj indir
docker images             # Yereldeki imajlarÄ± listele
docker rmi <image_id>     # Ä°maj sil
docker build -t name .    # Dockerfileâ€™dan imaj oluÅŸtur

ğŸ”¹ 2. Container Ä°ÅŸlemleri

docker run <image>                 # Yeni container baÅŸlat
docker run -it <image> bash        # EtkileÅŸimli baÅŸlat (terminal aÃ§ar)
docker ps                          # Ã‡alÄ±ÅŸan containerâ€™larÄ± listele
docker ps -a                       # TÃ¼m containerâ€™larÄ± listele (durdurulmuÅŸ dahil)
docker stop <container_id>         # Container durdur
docker start <container_id>        # DurdurulmuÅŸ containerâ€™Ä± baÅŸlat
docker restart <container_id>      # Container yeniden baÅŸlat
docker rm <container_id>           # Container sil

ğŸ”¹ 3. Log ve BaÄŸlantÄ± Ä°ÅŸlemleri

docker logs <container_id>         # Container loglarÄ±nÄ± gÃ¶rÃ¼ntÃ¼le
docker exec -it <container_id> sh  # Ã‡alÄ±ÅŸan container iÃ§ine gir


ğŸ”¹ 4. Sistem YÃ¶netimi

docker version      # Docker versiyonunu Ã¶ÄŸren
docker info         # Sistem bilgilerini gÃ¶ster
docker system df    # Disk kullanÄ±mÄ±nÄ± gÃ¶ster
docker system prune # KullanÄ±lmayan imaj, container, volume temizle

---------------------- ---------------------- -------------- ---------------------- ---------------------- --------------

Middleware vs Guard

Middleware	
Temel AmaÃ§ :	Ä°steÄŸi iÅŸlemek, deÄŸiÅŸtirmek, gÃ¼nlÃ¼klemek (logging) veya Kimlik DoÄŸrulama (Authentication) gibi genel iÅŸlemler iÃ§in kullanÄ±lÄ±r.	
Odak NoktasÄ± : UygulamanÄ±n bÃ¼tÃ¼nÃ¼nde veya belirli rota gruplarÄ±nda genel istek Ã¶ncesi gÃ¶revler.
Route Bilgisi : Genellikle bilmez. Middleware, route iÅŸleyicisine ulaÅŸmadan Ã¶nce Ã§alÄ±ÅŸÄ±r ve hangi Controller veya handler'Ä±n Ã§aÄŸrÄ±lacaÄŸÄ±nÄ± bilmez. Bu yÃ¼zden kararlarÄ± yalnÄ±zca istek/cevap nesnesine dayanÄ±r.
Karar MekanizmasÄ± : next() Ã§aÄŸÄ±rarak isteÄŸin bir sonraki adÄ±ma (Guard'a veya Controller'a) ilerlemesini saÄŸlar veya bir yanÄ±t gÃ¶ndererek dÃ¶ngÃ¼yÃ¼ sonlandÄ±rÄ±r.

Guard
Temel AmaÃ§ : Yetkilendirme (Authorization) ve eriÅŸim kontrolÃ¼ yapmak iÃ§in kullanÄ±lÄ±r. Bir kullanÄ±cÄ±nÄ±n belirli bir rotaya/kaynaÄŸa eriÅŸim izni olup olmadÄ±ÄŸÄ±nÄ± belirler.
Odak NoktasÄ± : Belirli bir rota iÅŸleyicisine (route handler) eriÅŸimi kÄ±sÄ±tlamak.
Route Bilgisi : Bilir. ExecutionContext sayesinde Ã§aÄŸrÄ±lmakta olan Controller ve method hakkÄ±nda bilgiye (metadata) eriÅŸebilir.
Karar MekanizmasÄ± : boolean (true veya false) deÄŸeri dÃ¶ndÃ¼rÃ¼r. true ise eriÅŸim izni verir, false ise eriÅŸimi engeller (genellikle bir HTTP istisnasÄ± fÄ±rlatÄ±r).

Middleware her zaman Guard'lardan Ã¶nce Ã§alÄ±ÅŸÄ±r.

Ã‡alÄ±ÅŸma Ã–nceliÄŸi

1. Middleware: Ä°lk olarak Ã§alÄ±ÅŸÄ±r. Express'teki geleneksel middleware'ler gibi davranÄ±r.

2. Guard: Middleware'den sonra Ã§alÄ±ÅŸÄ±r. Rotaya eriÅŸimi etkinleÅŸtirmeden Ã¶nce yetkilendirme kontrolÃ¼nÃ¼ yapar.

3. Interceptor (Ã¶nce): Guard'dan sonra, Controller'dan Ã¶nce Ã§alÄ±ÅŸÄ±r.

4. Pipe: Controller metodu Ã§aÄŸrÄ±lmadan hemen Ã¶nce Ã§alÄ±ÅŸÄ±r.

5. Controller Metodu: Ã‡alÄ±ÅŸtÄ±rÄ±lÄ±r.




